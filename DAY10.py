#All possible paths
'''
#input:5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]
#output:
[5, 7, 4, 8, 2]
[5, 7, 4, 2]
[5, 7, 3, 8, 4, 2]
[5, 7, 3, 8, 2]
[5, 3, 7, 4, 8, 2]
[5, 3, 7, 4, 2]
[5, 3, 8, 4, 2]
[5, 3, 8, 2]
DFS Traversal:
[5, 7, 4, 8, 3, 2]
'''
'''def paths(d,x,e):
    l.append(x)
    if x==e:
        print(l)
        l.pop()
        return
    for i in d[x]:
        if i not in l:
            paths(d,i,e)
    l.pop()
#DFS Traversal
def dfs(d,x):
    l.append(x)
    for i in d[x]:
        if i not in l:
            dfs(d,i)
    return l
 
d={5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]}
l=[]
paths(d,5,2)
print("DFS Traversal:")
dfs(d,5)
print(l)
'''
#------------------------------------------------------------------------------
'''# Minimum Path and cost
#input:5:[(7,2),(3,1)],7:[(5,2),(4,6),(3,2)],4:[(7,6),(8,1),(2,2)],8:[(3,1),(4,2),(2,4)],3:[(5,3),(7,4),(8,6)],2:[(4,3),(8,3)]
#output:
(10, [5, 7, 4, 2])
(10, [5, 7, 4, 2])
(10, [5, 7, 4, 2])
(10, [5, 7, 4, 2])
(10, [5, 7, 4, 2])
(10, [5, 7, 4, 2])
'''
'''
def pathcost(d,x,e,c,m,l1):
    l.append(x)
    if(x==e):
        if(c<m):
            m=c
            l1=l.copy()
        l.pop()
        return m,l1
    for i in d[x]:
        if i[0] not in l:
            m,l1=pathcost(d,i[0],e,c+i[1],m,l1)
    l.pop()
    return m,l1
d={5:[(7,2),(3,1)],7:[(5,2),(4,6),(3,2)],4:[(7,6),(8,1),(2,2)],8:[(3,1),(4,2),(2,4)],3:[(5,3),(7,4),(8,6)],2:[(4,3),(8,3)]}
l=[]
for i in d.keys():
    print(pathcost(d,5,2,0,99999,[]))
'''
#----------------------------------------------------------------------------------------------------------------------
#All possible paths to every node
'''
#input:5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]
#output
[5]
[5, 7]
[5, 3, 7]
[5, 3, 8, 4, 7]
[5, 3, 8, 2, 4, 7]
[5, 7, 4]
[5, 7, 3, 8, 4]
[5, 7, 3, 8, 2, 4]
[5, 3, 7, 4]
[5, 3, 8, 4]
[5, 3, 8, 2, 4]
[5, 7, 4, 8]
[5, 7, 4, 2, 8]
[5, 7, 3, 8]
[5, 3, 7, 4, 8]
[5, 3, 7, 4, 2, 8]
[5, 3, 8]
[5, 7, 4, 8, 3]
[5, 7, 4, 2, 8, 3]
[5, 7, 3]
[5, 3]
[5, 7, 4, 8, 2]
[5, 7, 4, 2]
[5, 7, 3, 8, 4, 2]
[5, 7, 3, 8, 2]
[5, 3, 7, 4, 8, 2]
[5, 3, 7, 4, 2]
[5, 3, 8, 4, 2]
[5, 3, 8, 2]
'''
'''
def paths(d,x,e):
    l.append(x)
    if x==e:
        print(l)
        l.pop()
        return
    for i in d[x]:
        if i not in l:
            paths(d,i,e)
    l.pop()
def allpaths(d,s):
    for i in d.keys():
        paths(d,s,i)
        
d={5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]}
l=[]
allpaths(d,5)
'''














